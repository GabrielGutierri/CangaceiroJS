{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;AACA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,QAAQ,IAAZ;;gBAEaC,iB,GAAN,MAAMA,iBAAN,CAAuB;AAC1BC,8BAAa;AACT,0BAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAsB;AAClB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;;AAEnC,4BAAGR,UAAH,EAAe,OAAOO,QAAQP,UAAR,CAAP;;AAEf,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;AACAF,oCAAYG,eAAZ,GAA8BC,KAAG;AACzBX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACP,yBAFD;;AAIAP,oCAAYQ,SAAZ,GAAwBJ,KAAG;AACvBb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,MAAI;AACnB,sCAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQP,UAAR;AAEH,yBARD;;AAUAS,oCAAYU,OAAZ,GAAsBN,KAAG;AACrBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAIH,qBAvBM,CAAP;AAwBH;;AAED,uBAAOT,aAAP,CAAqBd,UAArB,EAAgC;AAC5BD,2BAAOyB,OAAP,CAAeC,SAAO;AAClB,4BAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACIzB,WAAW4B,iBAAX,CAA6BH,KAA7B;AACJzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AACH,qBAJD;AAKH;;AAED,uBAAOC,eAAP,GAAwB;AACpB,wBAAG/B,UAAH,EAAc;AACVC;AACH;AACJ;AA5CyB,a","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory{\r\n    constructor(){\r\n        throw new Error(\"não é possível instanciar essa classe.\");\r\n    }\r\n\r\n    static getConnection(){\r\n        return new Promise((resolve, reject) =>{\r\n\r\n            if(connection) return resolve(connection);\r\n\r\n            const openRequest = indexedDB.open(\"jscangaceiro\", 2);\r\n            openRequest.onupgradeneeded = e=>{\r\n                    ConnectionFactory._createStores(e.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = e=>{\r\n                connection = e.target.result;\r\n                close = connection.close.bind(connection);\r\n                connection.close = ()=>{\r\n                    throw new Error(\"Conexão não pode ser diretamente fechada\");\r\n                }\r\n                resolve(connection);\r\n\r\n            };\r\n\r\n            openRequest.onerror = e=>{\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static _createStores(connection){\r\n        stores.forEach(store=>{\r\n            if(connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        });\r\n    }\r\n\r\n    static closeConnection(){\r\n        if(connection){\r\n            close();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}